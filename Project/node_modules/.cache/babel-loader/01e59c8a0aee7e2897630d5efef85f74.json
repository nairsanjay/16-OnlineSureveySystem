{"ast":null,"code":"/**\r\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n * Available under MIT license <https://lodash.com/license>\r\n */\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/**\r\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\n\nvar objectToString = objectProto.toString;\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\n\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n/**\r\n * Checks if `value` is classified as a `Number` primitive or object.\r\n *\r\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\r\n * as numbers, use the `_.isFinite` method.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\r\n * @example\r\n *\r\n * _.isNumber(3);\r\n * // => true\r\n *\r\n * _.isNumber(Number.MIN_VALUE);\r\n * // => true\r\n *\r\n * _.isNumber(Infinity);\r\n * // => true\r\n *\r\n * _.isNumber('3');\r\n * // => false\r\n */\n\n\nfunction isNumber(value) {\n  return typeof value == 'number' || isObjectLike(value) && objectToString.call(value) == numberTag;\n}\n\nmodule.exports = isNumber;","map":{"version":3,"sources":["C:/Users/abc/Documents/GitHub/16-OnlineSureveySystem/Project/node_modules/lodash.isnumber/index.js"],"names":["numberTag","objectProto","Object","prototype","objectToString","toString","isObjectLike","value","isNumber","call","module","exports"],"mappings":"AAAA;;;;;;;;;AASA;AACA,IAAIA,SAAS,GAAG,iBAAhB;AAEA;;AACA,IAAIC,WAAW,GAAGC,MAAM,CAACC,SAAzB;AAEA;;;;;AAIA,IAAIC,cAAc,GAAGH,WAAW,CAACI,QAAjC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,SAAO,CAAC,CAACA,KAAF,IAAW,OAAOA,KAAP,IAAgB,QAAlC;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASC,QAAT,CAAkBD,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,IAAgB,QAAhB,IACJD,YAAY,CAACC,KAAD,CAAZ,IAAuBH,cAAc,CAACK,IAAf,CAAoBF,KAApB,KAA8BP,SADxD;AAED;;AAEDU,MAAM,CAACC,OAAP,GAAiBH,QAAjB","sourcesContent":["/**\r\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n * Available under MIT license <https://lodash.com/license>\r\n */\r\n\r\n/** `Object#toString` result references. */\r\nvar numberTag = '[object Number]';\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n\r\n/**\r\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar objectToString = objectProto.toString;\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return !!value && typeof value == 'object';\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as a `Number` primitive or object.\r\n *\r\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\r\n * as numbers, use the `_.isFinite` method.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\r\n * @example\r\n *\r\n * _.isNumber(3);\r\n * // => true\r\n *\r\n * _.isNumber(Number.MIN_VALUE);\r\n * // => true\r\n *\r\n * _.isNumber(Infinity);\r\n * // => true\r\n *\r\n * _.isNumber('3');\r\n * // => false\r\n */\r\nfunction isNumber(value) {\r\n  return typeof value == 'number' ||\r\n    (isObjectLike(value) && objectToString.call(value) == numberTag);\r\n}\r\n\r\nmodule.exports = isNumber;\r\n"]},"metadata":{},"sourceType":"script"}