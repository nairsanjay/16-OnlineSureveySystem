{"ast":null,"code":"var inherits = require('inherits');\n\nvar Buffer = require('buffer').Buffer;\n\nvar DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n}\n\n;\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  var lines = data.toString().split(/[\\r\\n]+/g);\n  var label = options.label.toUpperCase();\n  var re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  var start = -1;\n  var end = -1;\n\n  for (var i = 0; i < lines.length; i++) {\n    var match = lines[i].match(re);\n    if (match === null) continue;\n    if (match[2] !== label) continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN') break;\n      start = i;\n    } else {\n      if (match[1] !== 'END') break;\n      end = i;\n      break;\n    }\n  }\n\n  if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);\n  var base64 = lines.slice(start + 1, end).join(''); // Remove excessive symbols\n\n  base64.replace(/[^a-z0-9\\+\\/=]+/gi, '');\n  var input = new Buffer(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};","map":{"version":3,"sources":["C:/Users/abc/Documents/GitHub/16-OnlineSureveySystem/Project/node_modules/asn1.js/lib/asn1/decoders/pem.js"],"names":["inherits","require","Buffer","DERDecoder","PEMDecoder","entity","call","enc","module","exports","prototype","decode","data","options","lines","toString","split","label","toUpperCase","re","start","end","i","length","match","Error","base64","slice","join","replace","input"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAA/B;;AAEA,IAAIC,UAAU,GAAGF,OAAO,CAAC,OAAD,CAAxB;;AAEA,SAASG,UAAT,CAAoBC,MAApB,EAA4B;AAC1BF,EAAAA,UAAU,CAACG,IAAX,CAAgB,IAAhB,EAAsBD,MAAtB;AACA,OAAKE,GAAL,GAAW,KAAX;AACD;;AAAA;AACDP,QAAQ,CAACI,UAAD,EAAaD,UAAb,CAAR;AACAK,MAAM,CAACC,OAAP,GAAiBL,UAAjB;;AAEAA,UAAU,CAACM,SAAX,CAAqBC,MAArB,GAA8B,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,OAAtB,EAA+B;AAC3D,MAAIC,KAAK,GAAGF,IAAI,CAACG,QAAL,GAAgBC,KAAhB,CAAsB,UAAtB,CAAZ;AAEA,MAAIC,KAAK,GAAGJ,OAAO,CAACI,KAAR,CAAcC,WAAd,EAAZ;AAEA,MAAIC,EAAE,GAAG,iCAAT;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,GAAG,GAAG,CAAC,CAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIE,KAAK,GAAGV,KAAK,CAACQ,CAAD,CAAL,CAASE,KAAT,CAAeL,EAAf,CAAZ;AACA,QAAIK,KAAK,KAAK,IAAd,EACE;AAEF,QAAIA,KAAK,CAAC,CAAD,CAAL,KAAaP,KAAjB,EACE;;AAEF,QAAIG,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,UAAII,KAAK,CAAC,CAAD,CAAL,KAAa,OAAjB,EACE;AACFJ,MAAAA,KAAK,GAAGE,CAAR;AACD,KAJD,MAIO;AACL,UAAIE,KAAK,CAAC,CAAD,CAAL,KAAa,KAAjB,EACE;AACFH,MAAAA,GAAG,GAAGC,CAAN;AACA;AACD;AACF;;AACD,MAAIF,KAAK,KAAK,CAAC,CAAX,IAAgBC,GAAG,KAAK,CAAC,CAA7B,EACE,MAAM,IAAII,KAAJ,CAAU,gCAAgCR,KAA1C,CAAN;AAEF,MAAIS,MAAM,GAAGZ,KAAK,CAACa,KAAN,CAAYP,KAAK,GAAG,CAApB,EAAuBC,GAAvB,EAA4BO,IAA5B,CAAiC,EAAjC,CAAb,CA9B2D,CA+B3D;;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAe,mBAAf,EAAoC,EAApC;AAEA,MAAIC,KAAK,GAAG,IAAI5B,MAAJ,CAAWwB,MAAX,EAAmB,QAAnB,CAAZ;AACA,SAAOvB,UAAU,CAACO,SAAX,CAAqBC,MAArB,CAA4BL,IAA5B,CAAiC,IAAjC,EAAuCwB,KAAvC,EAA8CjB,OAA9C,CAAP;AACD,CApCD","sourcesContent":["var inherits = require('inherits');\r\nvar Buffer = require('buffer').Buffer;\r\n\r\nvar DERDecoder = require('./der');\r\n\r\nfunction PEMDecoder(entity) {\r\n  DERDecoder.call(this, entity);\r\n  this.enc = 'pem';\r\n};\r\ninherits(PEMDecoder, DERDecoder);\r\nmodule.exports = PEMDecoder;\r\n\r\nPEMDecoder.prototype.decode = function decode(data, options) {\r\n  var lines = data.toString().split(/[\\r\\n]+/g);\r\n\r\n  var label = options.label.toUpperCase();\r\n\r\n  var re = /^-----(BEGIN|END) ([^-]+)-----$/;\r\n  var start = -1;\r\n  var end = -1;\r\n  for (var i = 0; i < lines.length; i++) {\r\n    var match = lines[i].match(re);\r\n    if (match === null)\r\n      continue;\r\n\r\n    if (match[2] !== label)\r\n      continue;\r\n\r\n    if (start === -1) {\r\n      if (match[1] !== 'BEGIN')\r\n        break;\r\n      start = i;\r\n    } else {\r\n      if (match[1] !== 'END')\r\n        break;\r\n      end = i;\r\n      break;\r\n    }\r\n  }\r\n  if (start === -1 || end === -1)\r\n    throw new Error('PEM section not found for: ' + label);\r\n\r\n  var base64 = lines.slice(start + 1, end).join('');\r\n  // Remove excessive symbols\r\n  base64.replace(/[^a-z0-9\\+\\/=]+/gi, '');\r\n\r\n  var input = new Buffer(base64, 'base64');\r\n  return DERDecoder.prototype.decode.call(this, input, options);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}