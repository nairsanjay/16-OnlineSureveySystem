{"ast":null,"code":"var jws = require('jws');\n\nmodule.exports = function (jwt, options) {\n  options = options || {};\n  var decoded = jws.decode(jwt, options);\n\n  if (!decoded) {\n    return null;\n  }\n\n  var payload = decoded.payload; //try parse the payload\n\n  if (typeof payload === 'string') {\n    try {\n      var obj = JSON.parse(payload);\n\n      if (obj !== null && typeof obj === 'object') {\n        payload = obj;\n      }\n    } catch (e) {}\n  } //return header if `complete` option is enabled.  header includes claims\n  //such as `kid` and `alg` used to select the key within a JWKS needed to\n  //verify the signature\n\n\n  if (options.complete === true) {\n    return {\n      header: decoded.header,\n      payload: payload,\n      signature: decoded.signature\n    };\n  }\n\n  return payload;\n};","map":{"version":3,"sources":["C:/Users/abc/Documents/GitHub/16-OnlineSureveySystem/Project/node_modules/jsonwebtoken/decode.js"],"names":["jws","require","module","exports","jwt","options","decoded","decode","payload","obj","JSON","parse","e","complete","header","signature"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AACvCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIC,OAAO,GAAGN,GAAG,CAACO,MAAJ,CAAWH,GAAX,EAAgBC,OAAhB,CAAd;;AACA,MAAI,CAACC,OAAL,EAAc;AAAE,WAAO,IAAP;AAAc;;AAC9B,MAAIE,OAAO,GAAGF,OAAO,CAACE,OAAtB,CAJuC,CAMvC;;AACA,MAAG,OAAOA,OAAP,KAAmB,QAAtB,EAAgC;AAC9B,QAAI;AACF,UAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAV;;AACA,UAAGC,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,QAAlC,EAA4C;AAC1CD,QAAAA,OAAO,GAAGC,GAAV;AACD;AACF,KALD,CAKE,OAAOG,CAAP,EAAU,CAAG;AAChB,GAdsC,CAgBvC;AACA;AACA;;;AACA,MAAIP,OAAO,CAACQ,QAAR,KAAqB,IAAzB,EAA+B;AAC7B,WAAO;AACLC,MAAAA,MAAM,EAAER,OAAO,CAACQ,MADX;AAELN,MAAAA,OAAO,EAAEA,OAFJ;AAGLO,MAAAA,SAAS,EAAET,OAAO,CAACS;AAHd,KAAP;AAKD;;AACD,SAAOP,OAAP;AACD,CA3BD","sourcesContent":["var jws = require('jws');\r\n\r\nmodule.exports = function (jwt, options) {\r\n  options = options || {};\r\n  var decoded = jws.decode(jwt, options);\r\n  if (!decoded) { return null; }\r\n  var payload = decoded.payload;\r\n\r\n  //try parse the payload\r\n  if(typeof payload === 'string') {\r\n    try {\r\n      var obj = JSON.parse(payload);\r\n      if(obj !== null && typeof obj === 'object') {\r\n        payload = obj;\r\n      }\r\n    } catch (e) { }\r\n  }\r\n\r\n  //return header if `complete` option is enabled.  header includes claims\r\n  //such as `kid` and `alg` used to select the key within a JWKS needed to\r\n  //verify the signature\r\n  if (options.complete === true) {\r\n    return {\r\n      header: decoded.header,\r\n      payload: payload,\r\n      signature: decoded.signature\r\n    };\r\n  }\r\n  return payload;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}